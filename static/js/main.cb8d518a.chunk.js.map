{"version":3,"sources":["images/10.png","images/12.png","images/22.png","components/Header.js","components/Comparison.js","components/Form.js","utils/api.js","utils/utils.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","Comparison","props","image1","image2","data1","data2","id1","id2","Number","ship10","ship12","ship22","starhipsSpec","name","ship1","cost_in_credits","ship2","max_atmosphering_speed","length","cargo_capacity","crew","style","backgroundImage","map","item","index","specColor1","specColor2","key","Form","React","useState","value1","setValue1","value2","setValue2","onSubmit","e","preventDefault","onChange","target","value","type","api","apiOptions","this","_baseUrl","baseUrl","res","ok","json","Promise","reject","statusText","err","message","fetch","then","_handleResponse","catch","_handleResponseError","id","starship1Info","setStarship1Info","starship2Info","setStarship2Info","setId1","setId2","all","getStarshipInfo","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.cb8d518a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/10.0bed5df3.png\";","module.exports = __webpack_public_path__ + \"static/media/12.718fe272.png\";","module.exports = __webpack_public_path__ + \"static/media/22.cec3fedd.png\";","import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <header className=\"header\">\r\n        <div className=\"header__logo\"></div>\r\n        <h1 className=\"header__title\">Starships comparison</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport './Comparison.css';\r\nimport ship10 from '../images/10.png';\r\nimport ship12 from '../images/12.png';\r\nimport ship22 from '../images/22.png';\r\n\r\nfunction Comparison(props) {\r\n\r\n  const {data1, data2, id1, id2} = props;\r\n\r\n  let image1;\r\n  let image2;\r\n\r\n  if (Number(id1) === 10) {\r\n    image1 = ship10;\r\n  } else if (Number(id1) === 12) {\r\n    image1 = ship12;\r\n  } else {image1 = ship22;}\r\n\r\n  if (Number(id2) === 10) {\r\n    image2 = ship10;\r\n  } else if (Number(id2) === 12) {\r\n    image2 = ship12;\r\n  } else {image2 = ship22;}\r\n\r\n  const starhipsSpec = [\r\n    {\r\n      name: 'Cost is Credits',\r\n      ship1: data1.cost_in_credits,\r\n      ship2: data2.cost_in_credits,\r\n    },\r\n    {\r\n      name: 'Max atmosphering speed',\r\n      ship1: data1.max_atmosphering_speed,\r\n      ship2: data2.max_atmosphering_speed,\r\n    },\r\n    {\r\n      name: 'Length',\r\n      ship1: data1.length,\r\n      ship2: data2.length,\r\n    },\r\n    {\r\n      name: 'Cargo capacity',\r\n      ship1: data1.cargo_capacity,\r\n      ship2: data2.cargo_capacity,\r\n    },\r\n    {\r\n      name: 'Crew',\r\n      ship1: data1.crew,\r\n      ship2: data2.crew,\r\n    },\r\n  ]\r\n\r\n   return (\r\n    <div className=\"comparison\">\r\n        <div className=\"comparison__wrapper\">\r\n            <div className=\"comparison__name\">{data1.name}</div>\r\n            <div className=\"comparison__name\">{data2.name}</div>\r\n        </div>\r\n        <div className=\"comparison__wrapper\">\r\n            <div className=\"comparison__image\" style={{backgroundImage: `url(${image1})`}}></div>\r\n            <div className=\"comparison__image\" style={{backgroundImage: `url(${image2})`}}></div>\r\n        </div>\r\n        {starhipsSpec.map((item, index) => {\r\n\r\n          let specColor1 = '';\r\n          let specColor2 = '';\r\n\r\n          if (Number(item.ship1) > Number(item.ship2)) {\r\n            specColor1 = 'color-green';\r\n            specColor2 = 'color-red'\r\n          } else {\r\n            specColor2 = 'color-green';\r\n            specColor1 = 'color-red'\r\n          }\r\n\r\n          if (Number(item.ship1) === Number(item.ship2)) {\r\n            specColor1 = specColor2 = 'color-yellow';\r\n          }\r\n\r\n          return (\r\n            <div key={index}>\r\n            <div className=\"comparison__title\">{item.name}</div>\r\n            <div className=\"comparison__wrapper\">\r\n                <p className={`comparison__item ${specColor1}`}>{item.ship1}</p>\r\n                <p className={`comparison__item ${specColor2}`}>{item.ship2}</p>\r\n            </div>\r\n            </div>\r\n          )\r\n        })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Comparison;","import React from 'react';\r\nimport './Form.css';\r\n\r\nfunction Form(props) {\r\n\r\n  const [value1, setValue1] = React.useState('10');\r\n  const [value2, setValue2] = React.useState('12');\r\n\r\n  function handleChange1 (e) {\r\n    setValue1(e.target.value);\r\n  }\r\n\r\n  function handleChange2 (e) {\r\n    setValue2(e.target.value);\r\n  }\r\n\r\n  function handleSubmit (e) {\r\n    e.preventDefault();\r\n    props.onSubmit(value1, value2);\r\n  }\r\n\r\n  return (\r\n      <div className=\"container\">\r\n        <h2 className=\"title\">Select starships</h2>\r\n        <form onSubmit={handleSubmit} className=\"form\">\r\n            <select onChange={handleChange1} value={value1} className=\"form__input\">\r\n                <option value=\"10\" >Millennium Falcon</option>\r\n                <option value=\"12\">X-wing</option>\r\n                <option value=\"22\">Imperial shuttle</option>\r\n            </select>\r\n            <select onChange={handleChange2} value={value2} className=\"form__input\">\r\n                <option value=\"10\" >Millennium Falcon</option>\r\n                <option value=\"12\">X-wing</option>\r\n                <option value=\"22\">Imperial shuttle</option>\r\n            </select>\r\n            <input className=\"form__btn\" type=\"submit\" value=\"Compare\"></input>\r\n        </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;","import {apiOptions} from './utils.js'\r\n\r\nclass Api {\r\n  constructor({apiOptions}) {\r\n    this._baseUrl = apiOptions.baseUrl;\r\n  }\r\n\r\n  _handleResponse(res){\r\n    if (res.ok) {\r\n        return res.json();\r\n    } else {\r\n        return Promise.reject(res.statusText)\r\n    }\r\n  }\r\n\r\n  _handleResponseError(err){\r\n\r\n    return Promise.reject(err.message)\r\n  }\r\n\r\n  getFilmInfo() {\r\n    return fetch(`${this._baseUrl}`)\r\n    .then(this._handleResponse)\r\n    .catch(this._handleResponseError);\r\n  }\r\n\r\n  getStarshipInfo(id) {\r\n    return fetch(`${this._baseUrl}${id}/`)\r\n    .then(this._handleResponse)\r\n    .catch(this._handleResponseError);\r\n  }\r\n}\r\n\r\nexport const api = new Api({apiOptions});\r\n\r\n","export const apiOptions = {\r\n    baseUrl: 'http://swapi.dev/api/starships/',\r\n  }\r\n","import React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Comparison from './Comparison';\nimport Form from './Form';\nimport { api } from '../utils/api';\n\nfunction App() {\n\n  const [starship1Info, setStarship1Info ] = React.useState('');\n  const [starship2Info, setStarship2Info ] = React.useState('');\n  const [id1, setId1 ] = React.useState('');\n  const [id2, setId2 ] = React.useState('');\n\n  // React.useEffect(() => {\n  //   api.getFilmInfo()\n  //     .then(res => console.log(res))\n  // }, [])\n\n  function handleSubmit (id1, id2) {\n    setId1(id1);\n    setId2(id2);\n    Promise.all([api.getStarshipInfo(id1), api.getStarshipInfo(id2)])\n      .then((data) => {\n        setStarship1Info(data[0]);\n        setStarship2Info(data[1]);\n      })\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Form onSubmit={handleSubmit}/>\n      {starship1Info && <Comparison data1={starship1Info} data2={starship2Info} id1={id1} id2={id2}/>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}